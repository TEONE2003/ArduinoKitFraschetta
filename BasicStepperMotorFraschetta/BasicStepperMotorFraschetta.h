#ifndef BasicStepperMotorFraschetta_h
#define BasicStepperMotorFraschetta_h
#include <MotorSwipingFraschetta.h>
class MOTORE_STEPPER_BASE:MOTORE_SWIPING{
protected:
 uint16_t PASSI_MASSIMI,POSIZIONE_AVANTI,POSIZIONE_INDIETRO;
 NE::EEPROM_UINT16_T MP;
public:
 uint16_t PERIODO_SPOSTAMENTO_IN_MILLISECONDI;
 uint16_t POSIZIONE()override{return MP.VALORE();}
 void MEMORIZZA_PASSI(uint16_t PASSI){
  if(PASSI<PASSI_MASSIMI){
   MP.VALORE(PASSI);
  }
  else{
   MP.VALORE(0);
  }
 }
 MOTORE_STEPPER_BASE(uint16_t PASSI_MASSIMI,uint16_t PERIODO_SPOSTAMENTO_IN_MILLISECONDI,uint16_t INDIRIZZO_EEPROM_CELLA1_POSIZIONE,uint16_t INDIRIZZO_EEPROM_CELLA2_POSIZIONE){
  this->PASSI_MASSIMI=PASSI_MASSIMI;
  this->PERIODO_SPOSTAMENTO_IN_MILLISECONDI=PERIODO_SPOSTAMENTO_IN_MILLISECONDI;
  MP = NE::EEPROM_UINT16_T(INDIRIZZO_EEPROM_CELLA1_POSIZIONE,INDIRIZZO_EEPROM_CELLA2_POSIZIONE);
 }
 virtual void PASSO_A_DESTRA()=0;
 virtual void PASSO_A_SINISTRA()=0;
 void PASSI_A_DESTRA(uint16_t PASSI){
  for(uint16_t P=POSIZIONE(); P<=PASSI; P++){PASSO_A_DESTRA(); delay(PERIODO_SPOSTAMENTO_IN_MILLISECONDI);}
 }
 void PASSI_A_SINISTRA(uint16_t PASSI){
  for(uint16_t P=POSIZIONE(); P>=PASSI; P--){PASSO_A_SINISTRA(); delay(PERIODO_SPOSTAMENTO_IN_MILLISECONDI);}
 }
 void POSIZIONE(uint16_t POSIZIONE){PASSI_A_DESTRA(POSIZIONE); PASSI_A_SINISTRA(POSIZIONE);}
 void SWIPE_AVANTI() override {POSIZIONE(POSIZIONE_AVANTI);}
 void SWIPE_INDIETRO() override {POSIZIONE(POSIZIONE_INDIETRO);}
 void SWIPING(uint16_t POSIZIONE_AVANTI,uint16_t POSIZIONE_INDIETRO,uint16_t TEMPO_DA_FERMO, UNITA_DI_TEMPO UNITA){
  this->POSIZIONE_AVANTI = POSIZIONE_AVANTI;
  this->POSIZIONE_INDIETRO = POSIZIONE_INDIETRO;
  MOTORE_SWIPING::SWIPING(TEMPO_DA_FERMO,UNITA);
 }
};
#endif
