#ifndef InputFraschetta_h
#define InputFraschetta_h
enum MODALITA_RESISTENZA{RESISTENZA_ESTERNA,PULLUP,PULLDOWN};
enum TIPO_DIGITALE:boolean{LOGICA_NORMALE=1,LOGICA_INVERSA=0};
class ENTRATA{
 protected:
  uint8_t PIN;
  TIPO_DIGITALE M_LETTURA_DIGITALE=LOGICA_NORMALE;
  MODALITA_RESISTENZA M_RESISTENZA=MODALITA_RESISTENZA::RESISTENZA_ESTERNA;
 public:
  void RESISTENZA_ESTERNA(){M_RESISTENZA=MODALITA_RESISTENZA::RESISTENZA_ESTERNA; pinMode(PIN,INPUT);}
  void PULLUP(){M_RESISTENZA=MODALITA_RESISTENZA::PULLUP; pinMode(PIN,INPUT_PULLUP);}
  void PULLDOWN(){M_RESISTENZA=MODALITA_RESISTENZA::PULLDOWN; digitalWrite(PIN,0);}
 protected:
  void IMPOSTA_PIN(const uint8_t &PIN){this->PIN=PIN; RESISTENZA_ESTERNA();}
  void IMPOSTA_MODALITA_RESISTENZA(const MODALITA_RESISTENZA &M_RESISTENZA){
   switch(M_RESISTENZA){
    case MODALITA_RESISTENZA::RESISTENZA_ESTERNA: RESISTENZA_ESTERNA(); break;
    case MODALITA_RESISTENZA::PULLUP: PULLUP(); break;
    case MODALITA_RESISTENZA::PULLDOWN: PULLDOWN(); break;
   }
  }
  void IMPOSTA_MODALITA_LETTURA_DIGITALE(TIPO_DIGITALE &M_LETTURA_DIGITALE){
   this->M_LETTURA_DIGITALE=M_LETTURA_DIGITALE;
  }
 public:
  ENTRATA(){}
  ENTRATA(uint8_t PIN){IMPOSTA_PIN(PIN);}
  ENTRATA(uint8_t PIN,MODALITA_RESISTENZA M_RESISTENZA){
   IMPOSTA_MODALITA_RESISTENZA(M_RESISTENZA); IMPOSTA_PIN(PIN);
  }
  ENTRATA(uint8_t PIN,TIPO_DIGITALE M_LETTURA_DIGITALE){
   IMPOSTA_MODALITA_LETTURA_DIGITALE(M_LETTURA_DIGITALE); IMPOSTA_PIN(PIN);
  }
  ENTRATA(uint8_t PIN,MODALITA_RESISTENZA M_RESISTENZA,TIPO_DIGITALE M_LETTURA_DIGITALE){
   IMPOSTA_MODALITA_RESISTENZA(M_RESISTENZA);
   IMPOSTA_MODALITA_LETTURA_DIGITALE(M_LETTURA_DIGITALE);
   IMPOSTA_PIN(PIN);
  }
  boolean LETTURA_DIGITALE(){
   boolean L=digitalRead(PIN);
   if(M_LETTURA_DIGITALE){return L;}
   else{return !L;}
  }
  uint16_t LETTURA_ANALOGICA(){return analogRead(PIN);}
};

#endif
