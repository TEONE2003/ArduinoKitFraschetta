#ifndef LedRgbFraschetta_h
#define LedRgbFraschetta_h
#include <LedRgbFraschetta.h>
struct VALORI_RGB{
 uint8_t VERDE,ROSSO,BLU;
 VALORI_RGB(){}
 VALORI_RGB(uint8_t VERDE,uint8_t ROSSO,uint8_t BLU){
  this->VERDE=VERDE; this->ROSSO=ROSSO; this->ROSSO=ROSSO;
 }
 void IMPOSTA_LUMINOSITA(uint8_t PERCENTUALE){
  VERDE=(PERCENTUALE*100/VERDE);
  ROSSO=(PERCENTUALE*100/ROSSO);
  BLU=(PERCENTUALE*100/BLU);
 }
};
const VALORI_RGB COLORE_VERDE=VALORI_RGB(0,128,0),COLORE_ROSSO=VALORI_RGB(255,0,0);
const VALORI_RGB COLORE_BLU=VALORI_RGB(0,0,255),COLORE_BIANCO=VALORI_RGB(255,255,255);
class LED_RGB{
 protected:
  LED VERDE,ROSSO,BLU;
  VALORI_RGB COLORE;
 public:
  void IMPOSTA_COLORE(VALORI_RGB COLORE){
   VERDE.IMPOSTA_STATO_ANALOGICO(COLORE.VERDE);
   ROSSO.IMPOSTA_STATO_ANALOGICO(COLORE.ROSSO);
   BLU.IMPOSTA_STATO_ANALOGICO(COLORE.BLU);
  }
  LED_RGB(){}
  LED_RGB(uint8_t PIN_VERDE,uint8_t PIN_ROSSO,uint8_t PIN_BLU){
   VERDE = LED(PIN_VERDE);
   ROSSO = LED(PIN_ROSSO);
   BLU = LED(PIN_BLU);
  }
  LED_RGB(uint8_t PIN_VERDE,uint8_t PIN_ROSSO,uint8_t PIN_BLU,VALORI_RGB COLORE){
   VERDE = LED(PIN_VERDE);
   ROSSO = LED(PIN_ROSSO);
   BLU = LED(PIN_BLU);
   this->COLORE=COLORE;
   IMPOSTA_COLORE(COLORE);
  }
  LED_RGB(uint8_t PIN_VERDE,uint8_t PIN_ROSSO,uint8_t PIN_BLU,MEMORIZZA_STATO SALVA){
   VERDE = LED(PIN_VERDE,SALVA);
   ROSSO = LED(PIN_ROSSO,SALVA);
   BLU = LED(PIN_BLU,SALVA);
  }
  LED_RGB(uint8_t PIN_VERDE,uint8_t PIN_ROSSO,uint8_t PIN_BLU,MEMORIZZA_STATO SALVA,VALORI_RGB COLORE){
   VERDE = LED(PIN_VERDE,SALVA);
   ROSSO = LED(PIN_ROSSO,SALVA);
   BLU = LED(PIN_BLU,SALVA);
   this->COLORE=COLORE;
   IMPOSTA_COLORE(COLORE);
  }
  void LAMPEGGIO(uint16_t PERIODO,UNITA_DI_TEMPO UNITA){
   VERDE.SPEGNI(); ROSSO.SPEGNI(); BLU.SPEGNI();
   ASPETTA(PERIODO,UNITA);
   IMPOSTA_COLORE(COLORE);
  }
  void ACCENDI_CON_DISSOLVENZA(uint8_t PERCENTUALE_MASSIMA,uint16_t LENTEZZA,UNITA_DI_TEMPO UNITA){
   VALORI_RGB COLORE_CAMBIATO = this->COLORE;
   for(uint8_t P=0;P<PERCENTUALE_MASSIMA;P++){
    COLORE_CAMBIATO.IMPOSTA_LUMINOSITA(100+P);
    IMPOSTA_COLORE(COLORE_CAMBIATO);
   }
  }
  void SPEGNI_CON_DISSOLVENZA(uint8_t PERCENTUALE_MASSIMA,uint16_t LENTEZZA,UNITA_DI_TEMPO UNITA){
   VALORI_RGB COLORE_CAMBIATO = this->COLORE;
   for(uint8_t P=0;P>0;P--){
    COLORE_CAMBIATO.IMPOSTA_LUMINOSITA(100-P);
    IMPOSTA_COLORE(COLORE_CAMBIATO);
   }
  }
  void PULSAZIONE(uint8_t PERCENTUALE_MASSIMA,uint16_t LENTEZZA,UNITA_DI_TEMPO UNITA){
   ACCENDI_CON_DISSOLVENZA(PERCENTUALE_MASSIMA,LENTEZZA,UNITA);
   SPEGNI_CON_DISSOLVENZA(PERCENTUALE_MASSIMA,LENTEZZA,UNITA);
  }
};
#endif
