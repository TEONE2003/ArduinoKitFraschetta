#ifndef TimestampFraschetta_h
#define TimestampFraschetta_h
#include <TimeFraschetta.h>
struct ORARIO{
protected:
 double NANOSEC,MICROSEC,MILLISEC,SEC,O,M;
public:

void ORE(uint64_t ORE){O = ORE;}
    
void MINUTI(uint64_t MINUTI){
 TEMPO T(MINUTI,MINUTI);
 if(MINUTI>59){
  O += T.ORE();
  M += T.RESTO();
 }
 else{M += MINUTI;}
}

void SECONDI(uint64_t SECONDI){
 TEMPO T(SECONDI,SECONDI);
 if(SECONDI > 59){MINUTI(T.MINUTI()); SEC += T.RESTO();}
 else{SEC += T.VALORE;}
}

void MILLISECONDI(uint64_t MILLISECONDI){
 TEMPO T(MILLISECONDI,MILLISECONDI);
 if(MILLISECONDI > 999){SECONDI(T.SECONDI()); MILLISEC += T.RESTO();}
 else{MILLISEC += T.VALORE;}
}

void MICROSECONDI(uint64_t MICROSECONDI){
 TEMPO T(MICROSECONDI,MICROSECONDI);
 if(MICROSECONDI > 999){MILLISECONDI(T.MILLISECONDI()); MICROSEC += T.RESTO();}
 else{MICROSEC += T.VALORE;}
}
    
void NANOSECONDI(uint64_t NANOSECONDI){
 TEMPO T(NANOSECONDI,NANOSECONDI);
 if(NANOSECONDI > 999){MICROSECONDI(T.MICROSECONDI()); NANOSEC += T.RESTO();}
 else{NANOSEC += T.VALORE;}
}
      
uint64_t  NANOSECONDI(){return NANOSEC;}
uint64_t  MICROSECONDI(){return MICROSEC;}
uint64_t  MILLISECONDI(){return MILLISEC;}
uint64_t  SECONDI(){return SEC;}
uint64_t  MINUTI(){return M;}
uint64_t  ORE(){return O;}
ORARIO(uint64_t ORE=0,uint64_t MINUTI=0,uint64_t SECONDI=0,uint64_t MILLISECONDI=0,uint64_t MICROSECONDI=0,uint64_t NANOSECONDI=0)
{this->NANOSECONDI=NANOSECONDI; this->MICROSECOND=MICROSECONDI; this->MILLISECONDI=MILLISECONDI; this->SECONDI=SECONDI; this->MINUTI=MINUTI; this->ORE=ORE;}
ORARIO(TEMPO TEMPO_DA_IMPOSTARE){this->NANOSECONDI(TEMPO_DA_IMPOSTARE.NANOSECONDI());}
};
#endif
